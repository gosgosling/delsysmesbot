import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes
from config import BOT_TOKEN, SYSTEM_MESSAGE_TYPES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SafeSystemMessageCleanerBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        self.application.add_handler(CommandHandler("start", self.start_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
        self.application.add_handler(CommandHandler("status", self.status_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.ALL, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –±–æ—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π**

–ü—Ä–∏–≤–µ—Ç! –Ø —É–¥–∞–ª—è—é –¢–û–õ–¨–ö–û —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ Telegram.

**–ß—Ç–æ —è —É–¥–∞–ª—è—é:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º new_chat_members
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º left_chat_member
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º new_chat_title
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º pinned_message
‚Ä¢ –î—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã Telegram

**–ß—Ç–æ —è –ù–ï —É–¥–∞–ª—è—é:**
‚Ä¢ –õ—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –§–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –°—Ç–∏–∫–µ—Ä—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        """
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üõ°Ô∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –±–æ—Ç—É**

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**
1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¢–û–õ–¨–ö–û —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã Telegram
2. –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ new_chat_members, left_chat_member, etc.
3. –ù–ò–ö–û–ì–î–ê –Ω–µ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

**–£–¥–∞–ª—è—é—Ç—Å—è –¢–û–õ–¨–ö–û:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º new_chat_members
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º left_chat_member
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º new_chat_title
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º new_chat_photo
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º pinned_message
‚Ä¢ –ò –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã

**–ù–ï —É–¥–∞–ª—è—é—Ç—Å—è:**
‚Ä¢ –õ—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –§–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –°—Ç–∏–∫–µ—Ä—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –∏ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        chat = update.effective_chat
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_member = await chat.get_member(context.bot.id)
            
            status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ**

**–ß–∞—Ç:** {chat.title or chat.first_name}
**–¢–∏–ø —á–∞—Ç–∞:** {chat.type}
**ID —á–∞—Ç–∞:** {chat.id}

**–ü—Ä–∞–≤–∞ –±–æ—Ç–∞:**
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'‚úÖ' if bot_member.status in ['administrator', 'creator'] else '‚ùå'}
‚Ä¢ –ú–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {'‚úÖ' if bot_member.can_delete_messages else '‚ùå'}
‚Ä¢ –ú–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {'‚úÖ' if bot_member.can_read_messages else '‚ùå'}

**–†–µ–∂–∏–º:** üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π (—Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã)
**–°—Ç–∞—Ç—É—Å:** {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if bot_member.status in ['administrator', 'creator'] else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
            """
        except Exception as e:
            status_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}"
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö"""
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã Telegram
        if self.has_system_attribute(message):
            try:
                # –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.delete()
                message_type = self.get_system_attribute_type(message)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º: {message_type} –≤ —á–∞—Ç–µ {message.chat.id}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self.notify_admins_privately(message, context, message_type)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                try:
                    await self.notify_admins_privately(message, context, error=True)
                except:
                    pass
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {message.text[:30] if message.text else 'No text'} –æ—Ç {message.from_user.first_name if message.from_user else 'Unknown'}")
    
    async def notify_admins_privately(self, message, context, message_type=None, error=False):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            admins = await message.chat.get_administrators()
            for admin in admins:
                if admin.user.id != context.bot.id:  # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
                    try:
                        if error:
                            notification_text = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.title}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞."
                        else:
                            notification_text = f"üóëÔ∏è –í —á–∞—Ç–µ {message.chat.title} —É–¥–∞–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º: {message_type}"
                        
                        await context.bot.send_message(
                            chat_id=admin.user.id,
                            text=notification_text
                        )
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
    
    def has_system_attribute(self, message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ Telegram"""
        for message_type in SYSTEM_MESSAGE_TYPES:
            if hasattr(message, message_type) and getattr(message, message_type) is not None:
                logger.info(f"–ù–∞–π–¥–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç: {message_type}")
                return True
        return False
    
    def get_system_attribute_type(self, message) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞"""
        for message_type in SYSTEM_MESSAGE_TYPES:
            if hasattr(message, message_type) and getattr(message, message_type) is not None:
                return message_type
        return "unknown"
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = SafeSystemMessageCleanerBot()
    bot.run() 