import logging
import json
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, CommandHandler, CallbackQueryHandler, filters, ContextTypes
from config import BOT_TOKEN, SYSTEM_MESSAGE_TYPES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AdvancedSystemMessageCleanerBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.stats = {
            'messages_deleted': 0,
            'errors': 0,
            'start_time': datetime.now()
        }
        self.settings = {
            'auto_delete': True,
            'log_deletions': False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ
            'notify_admins': True    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
        }
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("settings", self.settings_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.ALL, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
            [InlineKeyboardButton("üìñ –°–ø—Ä–∞–≤–∫–∞", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
ü§ñ **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π**

–ü—Ä–∏–≤–µ—Ç! –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–æ–≤.

**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

**–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
        """
        await update.message.reply_text(welcome_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ auto_delete - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
‚Ä¢ log_deletions - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–π –≤ —á–∞—Ç
‚Ä¢ notify_admins - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã:**
‚Ä¢ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ –ü—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ü—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ/–≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
‚Ä¢ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤
‚Ä¢ –ò –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ...
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        chat = update.effective_chat
        
        try:
            bot_member = await chat.get_member(context.bot.id)
            
            status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —á–∞—Ç–µ**

**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title or chat.first_name}
‚Ä¢ –¢–∏–ø: {chat.type}
‚Ä¢ ID: {chat.id}
‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {await chat.get_member_count() if chat.type in ['group', 'supergroup'] else 'N/A'}

**–ü—Ä–∞–≤–∞ –±–æ—Ç–∞:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {bot_member.status}
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'‚úÖ' if bot_member.status in ['administrator', 'creator'] else '‚ùå'}
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if bot_member.can_delete_messages else '‚ùå'}
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if bot_member.can_read_messages else '‚ùå'}

**–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã:** {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if bot_member.status in ['administrator', 'creator'] else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
            """
        except Exception as e:
            status_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}"
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        uptime = datetime.now() - self.stats['start_time']
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        stats_text = f"""
üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞**

**–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {uptime.days}–¥ {hours}—á {minutes}–º {seconds}—Å
**–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {self.stats['messages_deleted']}
**–û—à–∏–±–æ–∫:** {self.stats['errors']}
**–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {self.stats['messages_deleted'] / max(1, self.stats['messages_deleted'] + self.stats['errors']) * 100:.1f}%

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ: {'‚úÖ' if self.settings['auto_delete'] else '‚ùå'}
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–∞—Ç: {'‚úÖ' if self.settings['log_deletions'] else '‚ùå'}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {'‚úÖ' if self.settings['notify_admins'] else '‚ùå'}
        """
        await update.message.reply_text(stats_text, parse_mode='Markdown')
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        keyboard = [
            [
                InlineKeyboardButton(
                    f"{'‚úÖ' if self.settings['auto_delete'] else '‚ùå'} –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ", 
                    callback_data='toggle_auto_delete'
                )
            ],
            [
                InlineKeyboardButton(
                    f"{'‚úÖ' if self.settings['log_deletions'] else '‚ùå'} –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–∞—Ç", 
                    callback_data='toggle_log_deletions'
                )
            ],
            [
                InlineKeyboardButton(
                    f"{'‚úÖ' if self.settings['notify_admins'] else '‚ùå'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤", 
                    callback_data='toggle_notify_admins'
                )
            ],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='reset_stats')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        settings_text = """
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
        """
        await update.message.reply_text(settings_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'stats':
            await self.stats_command(update, context)
        elif query.data == 'settings':
            await self.settings_command(update, context)
        elif query.data == 'help':
            await self.help_command(update, context)
        elif query.data == 'toggle_auto_delete':
            self.settings['auto_delete'] = not self.settings['auto_delete']
            await query.edit_message_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ' –∏–∑–º–µ–Ω–µ–Ω–∞!")
        elif query.data == 'toggle_log_deletions':
            self.settings['log_deletions'] = not self.settings['log_deletions']
            await query.edit_message_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–∞—Ç' –∏–∑–º–µ–Ω–µ–Ω–∞!")
        elif query.data == 'toggle_notify_admins':
            self.settings['notify_admins'] = not self.settings['notify_admins']
            await query.edit_message_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤' –∏–∑–º–µ–Ω–µ–Ω–∞!")
        elif query.data == 'reset_stats':
            self.stats['messages_deleted'] = 0
            self.stats['errors'] = 0
            await query.edit_message_text("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞!")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö"""
        if not self.settings['auto_delete']:
            return
            
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º
        if self.is_system_message(message):
            try:
                # –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.delete()
                self.stats['messages_deleted'] += 1
                
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ {self.get_message_type(message)} –≤ —á–∞—Ç–µ {message.chat.id}")
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–∞—Ç (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
                if self.settings['log_deletions'] and message.chat.type in ['group', 'supergroup']:
                    log_message = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {self.get_message_type(message)}"
                    await context.bot.send_message(
                        chat_id=message.chat.id,
                        text=log_message,
                        reply_to_message_id=None
                    )
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if self.settings['notify_admins']:
                    await self.notify_admins_privately(message, context)
                    
            except Exception as e:
                self.stats['errors'] += 1
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                if self.settings['notify_admins']:
                    try:
                        await self.notify_admins_privately(message, context, error=True)
                    except:
                        pass
    
    async def notify_admins_privately(self, message, context, error=False):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            admins = await message.chat.get_administrators()
            for admin in admins:
                if admin.user.id != context.bot.id:  # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
                    try:
                        if error:
                            notification_text = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.title}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞."
                        else:
                            notification_text = f"üóëÔ∏è –í —á–∞—Ç–µ {message.chat.title} —É–¥–∞–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: {self.get_message_type(message)}"
                        
                        await context.bot.send_message(
                            chat_id=admin.user.id,
                            text=notification_text
                        )
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
    
    def is_system_message(self, message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        for message_type in SYSTEM_MESSAGE_TYPES:
            if hasattr(message, message_type) and getattr(message, message_type) is not None:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if message.text:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if any(keyword in message.text for keyword in [
                '–¥–æ–±–∞–≤–∏–ª(–∞)', '–¥–æ–±–∞–≤–∏–ª', '–¥–æ–±–∞–≤–∏–ª–∞', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å',
                'added', 'joined', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å –∫ –≥—Ä—É–ø–ø–µ'
            ]):
                return True
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if any(keyword in message.text for keyword in [
                '–ø–æ–∫–∏–Ω—É–ª(–∞)', '–ø–æ–∫–∏–Ω—É–ª', '–ø–æ–∫–∏–Ω—É–ª–∞', 'left', '—É—à–µ–ª', '—É—à–ª–∞',
                '–ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É', '–ø–æ–∫–∏–Ω—É–ª–∞ –≥—Ä—É–ø–ø—É', '—É—à–µ–ª –∏–∑ –≥—Ä—É–ø–ø—ã', '—É—à–ª–∞ –∏–∑ –≥—Ä—É–ø–ø—ã'
            ]):
                return True
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —á–∞—Ç–∞
            if any(keyword in message.text for keyword in [
                '–∏–∑–º–µ–Ω–∏–ª(–∞) –Ω–∞–∑–≤–∞–Ω–∏–µ', '–∏–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ', '–∏–∑–º–µ–Ω–∏–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ',
                '–∏–∑–º–µ–Ω–∏–ª(–∞) —Ñ–æ—Ç–æ', '–∏–∑–º–µ–Ω–∏–ª —Ñ–æ—Ç–æ', '–∏–∑–º–µ–Ω–∏–ª–∞ —Ñ–æ—Ç–æ',
                '—É–¥–∞–ª–∏–ª(–∞) —Ñ–æ—Ç–æ', '—É–¥–∞–ª–∏–ª —Ñ–æ—Ç–æ', '—É–¥–∞–ª–∏–ª–∞ —Ñ–æ—Ç–æ',
                '–∑–∞–∫—Ä–µ–ø–∏–ª(–∞)', '–∑–∞–∫—Ä–µ–ø–∏–ª', '–∑–∞–∫—Ä–µ–ø–∏–ª–∞', 'pinned'
            ]):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –Ω–µ –∏–º–µ—é—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–º–µ—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if message.text is None and not any([
            message.photo, message.video, message.audio, message.document, 
            message.voice, message.video_note, message.sticker, message.animation
        ]):
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–µ—Ç –º–µ–¥–∏–∞ - —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return True
        
        return False
    
    def get_message_type(self, message) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        for message_type in SYSTEM_MESSAGE_TYPES:
            if hasattr(message, message_type) and getattr(message, message_type) is not None:
                return message_type
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        if message.text:
            if any(keyword in message.text for keyword in ['–¥–æ–±–∞–≤–∏–ª(–∞)', '–¥–æ–±–∞–≤–∏–ª', '–¥–æ–±–∞–≤–∏–ª–∞', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å', 'added', 'joined']):
                return 'new_chat_members'
            elif any(keyword in message.text for keyword in ['–ø–æ–∫–∏–Ω—É–ª(–∞)', '–ø–æ–∫–∏–Ω—É–ª', '–ø–æ–∫–∏–Ω—É–ª–∞', 'left', '—É—à–µ–ª', '—É—à–ª–∞']):
                return 'left_chat_member'
            elif any(keyword in message.text for keyword in ['–Ω–∞–∑–≤–∞–Ω–∏–µ', 'title']):
                return 'new_chat_title'
            elif any(keyword in message.text for keyword in ['—Ñ–æ—Ç–æ', 'photo']):
                return 'new_chat_photo'
            elif any(keyword in message.text for keyword in ['–∑–∞–∫—Ä–µ–ø–∏–ª(–∞)', '–∑–∞–∫—Ä–µ–ø–∏–ª', '–∑–∞–∫—Ä–µ–ø–∏–ª–∞', 'pinned']):
                return 'pinned_message'
        
        return "unknown"
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: {self.settings}")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = AdvancedSystemMessageCleanerBot()
    bot.run() 