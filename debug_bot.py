import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes
from config import BOT_TOKEN, SYSTEM_MESSAGE_TYPES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class DebugSystemMessageCleanerBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        self.application.add_handler(CommandHandler("start", self.start_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
        self.application.add_handler(CommandHandler("status", self.status_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.ALL, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üîç **–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –±–æ—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π**

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

–ë–æ—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–æ –ù–ï –±—É–¥–µ—Ç –∏—Ö —É–¥–∞–ª—è—Ç—å.
        """
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üîç **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º—É –±–æ—Ç—É**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ:

**–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ—Ç:**
‚Ä¢ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–∏—Å—Ç–µ–º–Ω–æ–µ/–æ–±—ã—á–Ω–æ–µ)
‚Ä¢ –ü—Ä–∏—á–∏–Ω—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é

**–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –û—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —É–¥–∞–ª–µ–Ω–∏–µ–º
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        chat = update.effective_chat
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_member = await chat.get_member(context.bot.id)
            
            status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ**

**–ß–∞—Ç:** {chat.title or chat.first_name}
**–¢–∏–ø —á–∞—Ç–∞:** {chat.type}
**ID —á–∞—Ç–∞:** {chat.id}

**–ü—Ä–∞–≤–∞ –±–æ—Ç–∞:**
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'‚úÖ' if bot_member.status in ['administrator', 'creator'] else '‚ùå'}
‚Ä¢ –ú–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {'‚úÖ' if bot_member.can_delete_messages else '‚ùå'}
‚Ä¢ –ú–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {'‚úÖ' if bot_member.can_read_messages else '‚ùå'}

**–†–µ–∂–∏–º:** üîç –û—Ç–ª–∞–¥–∫–∞ (—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è)
**–°—Ç–∞—Ç—É—Å:** {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if bot_member.status in ['administrator', 'creator'] else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
            """
        except Exception as e:
            status_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}"
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        message = update.message
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        is_system = self.is_system_message(message)
        message_type = self.get_message_type(message)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        debug_info = f"""
üîç **–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:**

**–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:** {message.from_user.first_name if message.from_user else 'Unknown'}
**–¢–µ–∫—Å—Ç:** {message.text[:100] + '...' if message.text and len(message.text) > 100 else message.text or '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}
**–¢–∏–ø:** {message_type}
**–°–∏—Å—Ç–µ–º–Ω–æ–µ:** {'‚úÖ –î–∞' if is_system else '‚ùå –ù–µ—Ç'}

**–ê—Ç—Ä–∏–±—É—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è:**
"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        for attr in SYSTEM_MESSAGE_TYPES:
            value = getattr(message, attr, None)
            if value is not None:
                debug_info += f"‚Ä¢ {attr}: ‚úÖ {value}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        debug_info += f"""
**–ö–æ–Ω—Ç–µ–Ω—Ç:**
‚Ä¢ –¢–µ–∫—Å—Ç: {'‚úÖ' if message.text else '‚ùå'}
‚Ä¢ –§–æ—Ç–æ: {'‚úÖ' if message.photo else '‚ùå'}
‚Ä¢ –í–∏–¥–µ–æ: {'‚úÖ' if message.video else '‚ùå'}
‚Ä¢ –ê—É–¥–∏–æ: {'‚úÖ' if message.audio else '‚ùå'}
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç: {'‚úÖ' if message.document else '‚ùå'}
‚Ä¢ –ì–æ–ª–æ—Å: {'‚úÖ' if message.voice else '‚ùå'}
‚Ä¢ –°—Ç–∏–∫–µ—Ä: {'‚úÖ' if message.sticker else '‚ùå'}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {'üóëÔ∏è –£–î–ê–õ–ò–¢–¨' if is_system else '‚úÖ –û–°–¢–ê–í–ò–¢–¨'}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        try:
            admins = await message.chat.get_administrators()
            for admin in admins:
                if admin.user.id != context.bot.id:
                    try:
                        await context.bot.send_message(
                            chat_id=admin.user.id,
                            text=debug_info,
                            parse_mode='Markdown'
                        )
                    except:
                        pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    def is_system_message(self, message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        for message_type in SYSTEM_MESSAGE_TYPES:
            if hasattr(message, message_type) and getattr(message, message_type) is not None:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if message.text:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if any(keyword in message.text for keyword in [
                '–¥–æ–±–∞–≤–∏–ª(–∞)', '–¥–æ–±–∞–≤–∏–ª', '–¥–æ–±–∞–≤–∏–ª–∞', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å',
                'added', 'joined', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å –∫ –≥—Ä—É–ø–ø–µ'
            ]):
                return True
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if any(keyword in message.text for keyword in [
                '–ø–æ–∫–∏–Ω—É–ª(–∞)', '–ø–æ–∫–∏–Ω—É–ª', '–ø–æ–∫–∏–Ω—É–ª–∞', 'left', '—É—à–µ–ª', '—É—à–ª–∞',
                '–ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É', '–ø–æ–∫–∏–Ω—É–ª–∞ –≥—Ä—É–ø–ø—É', '—É—à–µ–ª –∏–∑ –≥—Ä—É–ø–ø—ã', '—É—à–ª–∞ –∏–∑ –≥—Ä—É–ø–ø—ã'
            ]):
                return True
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —á–∞—Ç–∞
            if any(keyword in message.text for keyword in [
                '–∏–∑–º–µ–Ω–∏–ª(–∞) –Ω–∞–∑–≤–∞–Ω–∏–µ', '–∏–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ', '–∏–∑–º–µ–Ω–∏–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ',
                '–∏–∑–º–µ–Ω–∏–ª(–∞) —Ñ–æ—Ç–æ', '–∏–∑–º–µ–Ω–∏–ª —Ñ–æ—Ç–æ', '–∏–∑–º–µ–Ω–∏–ª–∞ —Ñ–æ—Ç–æ',
                '—É–¥–∞–ª–∏–ª(–∞) —Ñ–æ—Ç–æ', '—É–¥–∞–ª–∏–ª —Ñ–æ—Ç–æ', '—É–¥–∞–ª–∏–ª–∞ —Ñ–æ—Ç–æ',
                '–∑–∞–∫—Ä–µ–ø–∏–ª(–∞)', '–∑–∞–∫—Ä–µ–ø–∏–ª', '–∑–∞–∫—Ä–µ–ø–∏–ª–∞', 'pinned'
            ]):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –Ω–µ –∏–º–µ—é—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–º–µ—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if message.text is None and not any([
            message.photo, message.video, message.audio, message.document, 
            message.voice, message.video_note, message.sticker, message.animation
        ]):
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–µ—Ç –º–µ–¥–∏–∞ - —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return True
        
        return False
    
    def get_message_type(self, message) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        for message_type in SYSTEM_MESSAGE_TYPES:
            if hasattr(message, message_type) and getattr(message, message_type) is not None:
                return message_type
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        if message.text:
            if any(keyword in message.text for keyword in ['–¥–æ–±–∞–≤–∏–ª(–∞)', '–¥–æ–±–∞–≤–∏–ª', '–¥–æ–±–∞–≤–∏–ª–∞', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å', 'added', 'joined']):
                return 'new_chat_members'
            elif any(keyword in message.text for keyword in ['–ø–æ–∫–∏–Ω—É–ª(–∞)', '–ø–æ–∫–∏–Ω—É–ª', '–ø–æ–∫–∏–Ω—É–ª–∞', 'left', '—É—à–µ–ª', '—É—à–ª–∞']):
                return 'left_chat_member'
            elif any(keyword in message.text for keyword in ['–Ω–∞–∑–≤–∞–Ω–∏–µ', 'title']):
                return 'new_chat_title'
            elif any(keyword in message.text for keyword in ['—Ñ–æ—Ç–æ', 'photo']):
                return 'new_chat_photo'
            elif any(keyword in message.text for keyword in ['–∑–∞–∫—Ä–µ–ø–∏–ª(–∞)', '–∑–∞–∫—Ä–µ–ø–∏–ª', '–∑–∞–∫—Ä–µ–ø–∏–ª–∞', 'pinned']):
                return 'pinned_message'
        
        return "user_message"
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = DebugSystemMessageCleanerBot()
    bot.run() 