import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes
from config import BOT_TOKEN, SYSTEM_MESSAGE_TYPES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class StrictSystemMessageCleanerBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        self.application.add_handler(CommandHandler("start", self.start_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
        self.application.add_handler(CommandHandler("status", self.status_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.ALL, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ **–°—Ç—Ä–æ–≥–∏–π –±–æ—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π**

–ü—Ä–∏–≤–µ—Ç! –Ø —É–¥–∞–ª—è—é –¢–û–õ–¨–ö–û —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ/–≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.

**–ß—Ç–æ —è —É–¥–∞–ª—è—é:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ "–í–ª–∞–¥–∏—Å–ª–∞–≤ –¥–æ–±–∞–≤–∏–ª(–∞) DelSysmess"
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ "–ê–Ω–Ω–∞ –ø–æ–∫–∏–Ω—É–ª–∞ –≥—Ä—É–ø–ø—É"
‚Ä¢ –î—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö

**–ß—Ç–æ —è –ù–ï —É–¥–∞–ª—è—é:**
‚Ä¢ –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –§–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        """
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å—Ç—Ä–æ–≥–æ–≥–æ –±–æ—Ç–∞**

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –£–¥–∞–ª—è–µ—Ç –¢–û–õ–¨–ö–û —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
3. –û—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏

**–£–¥–∞–ª—è—é—Ç—Å—è –¢–û–õ–¨–ö–û:**
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è/—Ñ–æ—Ç–æ —á–∞—Ç–∞
‚Ä¢ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

**–ù–ï —É–¥–∞–ª—è—é—Ç—Å—è:**
‚Ä¢ –õ—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –§–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –°—Ç–∏–∫–µ—Ä—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –∏ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        chat = update.effective_chat
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_member = await chat.get_member(context.bot.id)
            
            status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å —Å—Ç—Ä–æ–≥–æ–≥–æ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ**

**–ß–∞—Ç:** {chat.title or chat.first_name}
**–¢–∏–ø —á–∞—Ç–∞:** {chat.type}
**ID —á–∞—Ç–∞:** {chat.id}

**–ü—Ä–∞–≤–∞ –±–æ—Ç–∞:**
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'‚úÖ' if bot_member.status in ['administrator', 'creator'] else '‚ùå'}
‚Ä¢ –ú–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {'‚úÖ' if bot_member.can_delete_messages else '‚ùå'}
‚Ä¢ –ú–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {'‚úÖ' if bot_member.can_read_messages else '‚ùå'}

**–†–µ–∂–∏–º:** üîí –°—Ç—Ä–æ–≥–∏–π (—É–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
**–°—Ç–∞—Ç—É—Å:** {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if bot_member.status in ['administrator', 'creator'] else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
            """
        except Exception as e:
            status_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}"
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö"""
        message = update.message
        
        # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if self.is_strict_system_message(message):
            try:
                # –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.delete()
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text[:50] if message.text else 'No text'} –≤ —á–∞—Ç–µ {message.chat.id}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self.notify_admins_privately(message, context)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                try:
                    await self.notify_admins_privately(message, context, error=True)
                except:
                    pass
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {message.text[:30] if message.text else 'No text'} –æ—Ç {message.from_user.first_name if message.from_user else 'Unknown'}")
    
    async def notify_admins_privately(self, message, context, error=False):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            admins = await message.chat.get_administrators()
            for admin in admins:
                if admin.user.id != context.bot.id:  # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
                    try:
                        if error:
                            notification_text = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.title}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞."
                        else:
                            notification_text = f"üóëÔ∏è –í —á–∞—Ç–µ {message.chat.title} —É–¥–∞–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text[:50] if message.text else 'No text'}"
                        
                        await context.bot.send_message(
                            chat_id=admin.user.id,
                            text=notification_text
                        )
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
    
    def is_strict_system_message(self, message) -> bool:
        """–°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã Telegram
        for message_type in SYSTEM_MESSAGE_TYPES:
            if hasattr(message, message_type) and getattr(message, message_type) is not None:
                logger.info(f"–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∞—Ç—Ä–∏–±—É—Ç—É: {message_type}")
                return True
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if message.text:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            add_keywords = ['–¥–æ–±–∞–≤–∏–ª(–∞)', '–¥–æ–±–∞–≤–∏–ª', '–¥–æ–±–∞–≤–∏–ª–∞', 'added']
            if any(keyword in message.text for keyword in add_keywords):
                logger.info(f"–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {message.text}")
                return True
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            leave_keywords = ['–ø–æ–∫–∏–Ω—É–ª(–∞)', '–ø–æ–∫–∏–Ω—É–ª', '–ø–æ–∫–∏–Ω—É–ª–∞', 'left', '—É—à–µ–ª', '—É—à–ª–∞']
            if any(keyword in message.text for keyword in leave_keywords):
                logger.info(f"–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤—ã—Ö–æ–¥–∞: {message.text}")
                return True
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —á–∞—Ç–∞
            change_keywords = ['–∏–∑–º–µ–Ω–∏–ª(–∞) –Ω–∞–∑–≤–∞–Ω–∏–µ', '–∏–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ', '–∏–∑–º–µ–Ω–∏–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ', '–∏–∑–º–µ–Ω–∏–ª(–∞) —Ñ–æ—Ç–æ', '–∏–∑–º–µ–Ω–∏–ª —Ñ–æ—Ç–æ', '–∏–∑–º–µ–Ω–∏–ª–∞ —Ñ–æ—Ç–æ', '–∑–∞–∫—Ä–µ–ø–∏–ª(–∞)', '–∑–∞–∫—Ä–µ–ø–∏–ª', '–∑–∞–∫—Ä–µ–ø–∏–ª–∞']
            if any(keyword in message.text for keyword in change_keywords):
                logger.info(f"–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –∏–∑–º–µ–Ω–µ–Ω–∏—è: {message.text}")
                return True
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—á–∏—Å—Ç—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        if message.text is None and not any([
            message.photo, message.video, message.audio, message.document, 
            message.voice, message.video_note, message.sticker, message.animation
        ]):
            logger.info("–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            return True
        
        # 4. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç - –ù–ï —Å–∏—Å—Ç–µ–º–Ω–æ–µ
        if message.from_user and message.from_user.id != context.bot.id:
            if message.text or message.photo or message.video or message.audio or message.document or message.voice or message.video_note or message.sticker or message.animation:
                return False
        
        return False
    
    def get_message_type(self, message) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        for message_type in SYSTEM_MESSAGE_TYPES:
            if hasattr(message, message_type) and getattr(message, message_type) is not None:
                return message_type
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        if message.text:
            if any(keyword in message.text for keyword in ['–¥–æ–±–∞–≤–∏–ª(–∞)', '–¥–æ–±–∞–≤–∏–ª', '–¥–æ–±–∞–≤–∏–ª–∞', 'added']):
                return 'new_chat_members'
            elif any(keyword in message.text for keyword in ['–ø–æ–∫–∏–Ω—É–ª(–∞)', '–ø–æ–∫–∏–Ω—É–ª', '–ø–æ–∫–∏–Ω—É–ª–∞', 'left', '—É—à–µ–ª', '—É—à–ª–∞']):
                return 'left_chat_member'
            elif any(keyword in message.text for keyword in ['–Ω–∞–∑–≤–∞–Ω–∏–µ']):
                return 'new_chat_title'
            elif any(keyword in message.text for keyword in ['—Ñ–æ—Ç–æ']):
                return 'new_chat_photo'
            elif any(keyword in message.text for keyword in ['–∑–∞–∫—Ä–µ–ø–∏–ª(–∞)', '–∑–∞–∫—Ä–µ–ø–∏–ª', '–∑–∞–∫—Ä–µ–ø–∏–ª–∞']):
                return 'pinned_message'
        
        return "user_message"
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–æ–≥–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = StrictSystemMessageCleanerBot()
    bot.run() 